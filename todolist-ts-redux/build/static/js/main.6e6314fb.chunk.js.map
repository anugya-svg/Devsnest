{"version":3,"sources":["components/app.tsx","actions/index.ts","reducer/index.ts","reducer/combineReducer.ts","store.ts","index.tsx"],"names":["App","useState","text","setText","todo","useSelector","state","task","dispatch","useDispatch","className","placeholder","value","onChange","e","target","onClick","type","payload","map","temp","index","dlt","p","todoReducer","action","filter","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"kNA0BeA,EArBL,WACN,MAAqBC,mBAAiB,IAAtC,mBAAOC,EAAP,KAAYC,EAAZ,KACMC,EAAKC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,QACzCC,EAASC,cACf,OACI,sBAAKC,UAAU,OAAf,UACI,uBAAOC,YAAY,iBAAiBC,MAAOV,EAAMW,SAAU,SAACC,GAAKX,EAAQW,EAAEC,OAAOH,UAClF,wBAAQI,QAAS,WAAKR,ECXvB,CACHS,KAAK,MACLC,QDSuChB,IACXC,EAAQ,KADhC,iBAEA,8BACCC,EAAKe,KAAI,SAACC,EAAYC,GAAb,OACF,qBAAiBX,UAAU,YAA3B,SACI,gCAAMU,EAAK,mBAAGV,UAAU,yBAAyBM,QAAS,WAAKR,ECX7E,SAACa,GACP,MAAO,CACHJ,KAAK,SACLC,QAAQG,GDQgFC,CAAID,WADtEA,Y,eEPxBE,EAAW,GAWFC,EAVG,WAAoC,IAAnClB,EAAkC,uDAAtBiB,EAAEE,EAAoB,uCACjD,OAAOA,EAAOR,MACV,IAAK,MACD,MAAM,GAAN,mBAAWX,GAAX,CAAiBmB,EAAOP,UAC5B,IAAK,SACD,OAAOZ,EAAMoB,QAAO,SAACtB,EAAYiB,GAAb,OAA4BA,IAAQI,EAAOP,WACnE,QACI,OAAOZ,ICZJqB,EAHGC,YAAgB,CAC9BrB,KAAKiB,ICAMK,EADHC,YAAYH,GCGxBI,IAASC,OACR,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEDI,SAASC,eAAe,W","file":"static/js/main.6e6314fb.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\nimport { add,dlt } from \"../actions/index\";\r\nimport { rootType } from \"../reducer/combineReducer\";\r\nimport \"../style.css\"\r\nconst App=()=>{\r\n    const [text,setText]=useState<string>(\"\");\r\n    const todo=useSelector((state:rootType)=>state.task)\r\n    const dispatch=useDispatch();\r\n    return (\r\n        <div className=\"main\">\r\n            <input placeholder=\"Type Something\" value={text} onChange={(e)=>{setText(e.target.value)}} />\r\n            <button onClick={()=>{dispatch(add(text))\r\n                                    setText(\"\")}}>Add</button>\r\n            <div>\r\n            {todo.map((temp:string,index:number)=>(\r\n                    <div key={index} className=\"container\">\r\n                        <div>{temp}<i className=\"far fa-trash-alt extra\" onClick={()=>{dispatch(dlt(index))}}></i></div>\r\n                    </div>\r\n                    \r\n                ))}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default App;","const add=(val:string)=>{\r\n    return {\r\n        type:\"ADD\",\r\n        payload:val\r\n    }\r\n}\r\nconst dlt=(index:number)=>{\r\n    return {\r\n        type:\"DELETE\",\r\n        payload:index\r\n    }\r\n}\r\nexport {add,dlt};","interface addType{\r\n    type:string,\r\n    payload:string\r\n}\r\ninterface dltType{\r\n    type:string,\r\n    payload:number\r\n}\r\ntype actionType=addType | dltType;\r\nconst p:string[]=[];\r\nconst todoReducer=(state:any[]=p,action:actionType)=>{\r\n    switch(action.type){\r\n        case \"ADD\":\r\n            return [...state,action.payload];\r\n        case \"DELETE\":\r\n            return state.filter((todo:string,index:number)=>index!==action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default todoReducer;","import {combineReducers} from \"redux\";\r\nimport todoReducer from \".\";\r\nconst rootReducer=combineReducers({\r\n    task:todoReducer\r\n})\r\nexport default rootReducer;\r\nexport type rootType=ReturnType<typeof rootReducer>","import rootReducer from \"./reducer/combineReducer\";\r\nimport { createStore } from \"redux\"\r\nconst store=createStore(rootReducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/app\"\nimport store from \"./store\"\nimport {Provider} from \"react-redux\"\nReactDOM.render(\n <Provider store={store}>\n   <App />\n </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}