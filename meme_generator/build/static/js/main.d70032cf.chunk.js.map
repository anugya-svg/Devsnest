{"version":3,"sources":["components/template.jsx","components/meme.jsx","components/app.jsx","index.js"],"names":["Template","templates","setMeme","className","map","temp","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","index","TextField","variant","size","type","label","margin","onChange","e","newBoxes","text","target","value","Button","box","fetch","then","res","json","data","success","console","log","color","App","setTemplates","useEffect","memes","ReactDOM","render","document","querySelector"],"mappings":"wLAaeA,EAbA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,UAAUC,EAAW,EAAXA,QACvB,OACA,qBAAKC,UAAU,OAAf,SACSF,EAAUG,KAAI,SAAAC,GAAI,OACf,qBAAmBF,UAAU,WAAWG,QAAS,WAC7CJ,EAAQG,IADZ,SAGI,qBAAKE,MAAO,CAACC,gBAAgB,OAAD,OAAQH,EAAKI,IAAb,MAAsBN,UAAU,WAHtDE,EAAKK,U,gCC0ChBC,EA5CJ,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAKV,EAAW,EAAXA,QACd,EAAqBW,mBAAS,CAC1BC,YAAYF,EAAKF,GACjBK,SAAS,aACTC,SAAS,YACTC,MAAM,KAJV,mBAAOC,EAAP,KAAYC,EAAZ,KAmBA,OACI,sBAAKhB,UAAU,OAAf,UACI,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,KACxB,8BAEQ,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAEC,GAAH,OAC3B,cAACC,EAAA,EAAD,CAAWC,QAAQ,WAAWC,KAAK,QAAQC,KAAK,OAAmBC,MAAK,uBAAkBL,EAAM,GAAKM,OAAO,SAASC,SAAU,SAACC,GAC5H,IAAMC,EAAShB,EAAKD,MACpBiB,EAAST,GAAO,CAACU,KAAKF,EAAEG,OAAOC,OAC/BlB,EAAQ,2BAAID,GAAL,IAAUD,MAAMiB,MACxB3B,MAAO,CAACwB,OAAO,QAJ0CN,QASxE,gCACI,cAACa,EAAA,EAAD,CAAQhC,QA5BF,WACf,IAAIG,EAAI,qDAAD,OAAsDS,EAAKJ,YAA3D,qBAAmFI,EAAKH,SAAxF,qBAA6GG,EAAKF,UACzHE,EAAKD,MAAMb,KAAI,SAACmC,EAAId,GAAL,OAAahB,GAAK,UAAF,OAAYgB,EAAZ,mBAA4Bc,EAAIJ,SAC/DK,MAAM/B,GACLgC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,IACgB,IAAfA,EAAKC,SACR3C,EAAQ,2BAAIU,GAAL,IAAUH,IAAImC,EAAKA,KAAKnC,UAGlCqC,QAAQC,IAAItC,IAkB2BmB,KAAK,QAAQD,QAAQ,YAAYqB,MAAM,YAAtE,2BACA,cAACV,EAAA,EAAD,CAAQhC,QAAS,WACbJ,EAAQ,OACTyB,QAAQ,YAAYC,KAAK,QAAQoB,MAAM,UAAUzC,MAAO,CAACwB,OAAO,OAFnE,oCClBDkB,MAlBf,WACI,MAA+BpC,mBAAS,IAAxC,mBAAOZ,EAAP,KAAiBiD,EAAjB,KACA,EAAqBrC,mBAAS,MAA9B,mBAAOD,EAAP,KAAYV,EAAZ,KAQA,OAPAiD,qBAAU,WACNX,MAAM,qCACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAACG,GACHM,EAAaN,EAAKA,KAAKQ,YAE7B,IAEE,sBAAKjD,UAAU,MAAf,UACI,gDACU,OAATS,EAAgB,cAAC,EAAD,CAAUX,UAAWA,EAAWC,QAASA,IAAY,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,Q,MCZ7GmD,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,cAAc,Y","file":"static/js/main.d70032cf.chunk.js","sourcesContent":["const Template=({templates,setMeme})=>{\r\n    return(\r\n    <div className=\"temp\">\r\n            {templates.map(temp=>(\r\n                <div key={temp.id} className=\"template\" onClick={()=>{\r\n                    setMeme(temp)\r\n                }}>\r\n                    <div style={{backgroundImage:`url(${temp.url})`}} className=\"image\"></div>\r\n                </div>\r\n            ))}\r\n    </div>\r\n    )\r\n}\r\nexport default Template","import { useState } from \"react\"\r\nimport { Button, TextField } from '@material-ui/core';\r\nconst Meme=({meme,setMeme})=>{\r\n    const [form,setForm]=useState({\r\n        template_id:meme.id,\r\n        username:\"anugya-svg\",\r\n        password:\"binary123\",\r\n        boxes:[]\r\n    })\r\n//    console.log(meme)\r\n   const generateMeme=()=>{\r\n       let url=`https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`\r\n       form.boxes.map((box,index)=>url+=`&boxes[${index}][text]=${box.text}`)\r\n       fetch(url)\r\n       .then(res=>res.json())\r\n       .then(data=>{\r\n           if(data.success===true)\r\n           setMeme({...meme,url:data.data.url})\r\n           \r\n       })\r\n        console.log(url)\r\n   }\r\n    return (\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"\"/>\r\n            <div>\r\n                {\r\n                    [...Array(meme.box_count)].map((_,index)=>(\r\n                        <TextField variant=\"outlined\" size=\"small\" type=\"text\" key={index} label={`Meme Caption ${index+1}`} margin=\"normal\" onChange={(e)=>{\r\n                            const newBoxes=form.boxes;\r\n                            newBoxes[index]={text:e.target.value}\r\n                            setForm({...form,boxes:newBoxes})\r\n                        }} style={{margin:\"5px\"}}></TextField>\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n            <div>\r\n                <Button onClick={generateMeme} size=\"small\" variant=\"contained\" color=\"secondary\">Generate Meme</Button>\r\n                <Button onClick={()=>{\r\n                    setMeme(null)\r\n                }} variant=\"contained\" size=\"small\" color=\"primary\" style={{margin:\"5px\"}}>Choose Template</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Meme","import {useState,useEffect} from \"react\"\r\nimport Template from './template'\r\nimport Meme from './meme'\r\nfunction App(){\r\n    const [templates,setTemplates]=useState([])\r\n    const [meme,setMeme]=useState(null)\r\n    useEffect(()=>{\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(res=>res.json())\r\n        .then((data)=>{\r\n            setTemplates(data.data.memes);\r\n        })\r\n    },[])\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Meme Generator</h1>\r\n            {meme === null ? <Template templates={templates} setMeme={setMeme}/> :<Meme meme={meme} setMeme={setMeme}/>}\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default App","import React from \"react\"\r\nimport ReactDOM  from \"react-dom\"\r\nimport App from './components/app'\r\nimport './style.css'\r\nReactDOM.render(<App/>,document.querySelector('#root'))"],"sourceRoot":""}